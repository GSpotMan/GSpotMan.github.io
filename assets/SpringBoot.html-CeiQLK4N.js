import{_ as s,c as a,a as e,b as l,d as n,e as t,o}from"./app-Qr5N_MW1.js";const r={};function d(h,i){return o(),a("div",null,[i[0]||(i[0]=e("h1",{id:"springboot",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#springboot"},[e("span",null,"SpringBoot")])],-1)),i[1]||(i[1]=e("p",null,"笔记未完成状态。",-1)),l(" more "),i[2]||(i[2]=n(`<p>SpringBoot的三层架构：<br><strong>1.controller</strong>:控制层，接受前端发送的请求，对请求进行处理，并响应数据。<br><strong>2.service</strong>：业务逻辑层，处理具体的业务逻辑。<br><strong>3.dao</strong>：数据访问层/持久层(Data Access Object，负责对数据库的访问操作，包括增删改查。</p><p>SpringBoot有三大特点分别为：<br><strong>1.IOC(Inversion Of Control)</strong>:对象的控制权由程序自身转移到外部容器，实现解耦。<br><strong>2.DI(Dependency injection)</strong>:容器为应用程序提供运行时，所依赖的资源，成为依赖注入。<br><strong>3.Bean对象</strong>:IOC外部容器中所创建、管理的对象。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="controller层注解" tabindex="-1"><a class="header-anchor" href="#controller层注解"><span>Controller层注解</span></a></h3><ul><li><code>@RequestParam</code>和<code>@RequestBody</code><br> 它允许你将请求体中的数据直接绑定到一个 Java 对象上，而不需要手动解析。可以减少处理 HTTP 请求数据的模板代码，使开发者可以更专注于业务逻辑。而<code>@RequestParam</code>主要处理简单类型的数据，而<code>@RequestBody</code>用于处理请求体中的数据,相比更复杂，如 JSON 或 XML 格式的数据。</li><li><code>@ResponBody</code><br><code>@RestController= @Controller + @ResponseBody</code>其中ResponBody作用在controller类或者方法中上，将方法返回值直接响应，如果返回值类型是实体对象/集合，则为JSON格式数据。</li></ul><h3 id="ioc-di注解" tabindex="-1"><a class="header-anchor" href="#ioc-di注解"><span>IOC&amp;DI注解</span></a></h3><ul><li><code>@Component</code><br> 控制反转注解，声明bean的机制注解，主要用于三层架构中的service层与dao层，将类放置于IOC容器中以便实现后续的解耦。它有三种衍生注解:<code>@Controller</code>,<code>@Service</code>和<code>@Repository</code>(标注在数据访问类上，由于与mybatis整合，用的少)。对于一些工具类，并不属于三层结构的，则使用注解<code>@Component</code>，否则使用衍生注解。</li><li><code>@ComponentScan</code><br> 不需要显示配置，但是实际上已经包含在了启动类声明注解@SpringBootApplication中，默认扫描的范围是启动类所在的包以及其子包。</li><li><code>@Autowired</code><br> 依赖注入注解，主要用于解耦过程中对象声明。例如:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EmpService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> EmpService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //右侧无需new service层对象以实现解耦过程。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以下三个注解用来解决多个相同类型bean的情况</strong></p><ul><li><code>@Primary</code><br> 用于和Component组件注解同时使用，标注优先级。</li><li><code>@Qualifier</code><br> 意思是资格赛，匹配符，通过与Autowored注解同时使用来标注使用哪个bean对象。</li><li><code>@Resource</code><br> 并不是springboot注解，而是jdk注解，不需要与Autowired配合使用，相当于Autowired+Qualifier</li></ul><h3 id="mybatis注解" tabindex="-1"><a class="header-anchor" href="#mybatis注解"><span>Mybatis注解</span></a></h3><ul><li><code>@Options</code><br> 使用方法：<code>@Options(keyProperty = &quot;id&quot;,useGeneratedKeys=true)</code>，放在Insert注解之上时，构造的新增对象会拿到一个主键的返回值，否则无返回值。</li></ul><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span>请求</span></a></h2><ul><li>实体参数<br> 使用方法：通过创建实体类,传入参数<code>User user</code>，类中创建get，set方法以及tostring。</li><li>数组参数<br> 使用方法： <ul><li>传入参数<code>String[] name</code></li><li>传入参数<code>@RequestParam List&lt;String&gt; name</code></li></ul></li><li>日期参数<br> 使用方法： <code>@DateTimeFormat(patterm=yyyy-MM-dd HH:mm:ss)LocalDateTime updatetime</code></li><li>json参数<br> 使用方法：同实体参数不过加入注解,<code>@Requestbody User user</code></li><li>路径参数<br> 使用方法：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/path/{id}/{name}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathVariable</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathVariable</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>统一响应<br> 使用方法：通过构造实体类以包含各种类型的数据，Integer,String等，<code>Public &quot;自定义类&quot; name（类名）</code>,通过写入get，set方法进行包装。</li></ul><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>Mybatis</span></a></h2><h3 id="参数占位符" tabindex="-1"><a class="header-anchor" href="#参数占位符"><span>参数占位符</span></a></h3>`,18)),i[3]||(i[3]=e("ul",null,[e("li",{"css-module":"."},[t("# "),e("ul",null,[e("li",null,"执行SQL时，会将#{...}替换为？，生成预编译SQL，会自动设置参数。"),e("li",null,"使用时机：参数传递时，都使用#{...}。")])]),e("li",{"css-module":"."},[t("$ "),e("ul",null,[e("li",null,"拼接SQL,直接将参数拼接到SQL语句中，存在SQL注入问题。登录密码千万不要这样设置。"),e("li",null,"使用时机，如果对表明，列表名进行动态设置时。")]),e("h3",{id:"xml映射标签",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#xml映射标签"},[e("span",null,"XML映射标签")])])]),e("li",null,[e("code",null,"<if>")]),e("li",null,[e("code",null,"<where>")]),e("li",null,[e("code",null,"<set>")]),e("li",null,[e("code",null,"<foreach>")]),e("li",null,[e("code",null,"<sql> ")]),e("li",null,[e("code",null,"<include>")])],-1))])}const c=s(r,[["render",d],["__file","SpringBoot.html.vue"]]),u=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/SpringBoot.html","title":"SpringBoot","lang":"zh-CN","frontmatter":{"tittle":"SpringBoot","icon":"pen-to-square","date":"2024-10-1","category":["Java"],"timeline":true,"tag":["Java"],"description":"笔记未完成状态。","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/SpringBoot.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"SpringBoot"}],["meta",{"property":"og:description","content":"笔记未完成状态。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-06T20:06:06.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-06T20:06:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-06T20:06:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"Controller层注解","slug":"controller层注解","link":"#controller层注解","children":[]},{"level":3,"title":"IOC&DI注解","slug":"ioc-di注解","link":"#ioc-di注解","children":[]},{"level":3,"title":"Mybatis注解","slug":"mybatis注解","link":"#mybatis注解","children":[]}]},{"level":2,"title":"请求","slug":"请求","link":"#请求","children":[]},{"level":2,"title":"Mybatis","slug":"mybatis","link":"#mybatis","children":[{"level":3,"title":"参数占位符","slug":"参数占位符","link":"#参数占位符","children":[]}]}],"git":{"createdTime":1727886936000,"updatedTime":1728245166000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":4}]},"readingTime":{"minutes":3.19,"words":957},"filePathRelative":"java笔记/SpringBoot.md","localizedDate":"2024年10月1日","excerpt":"\\n<p>笔记未完成状态。</p>\\n","autoDesc":true}');export{c as comp,u as data};
