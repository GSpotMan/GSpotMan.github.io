import{_ as t,c as a,a as i,b as s,d as n,o}from"./app-B3ZZLxty.js";const r={};function l(p,e){return o(),a("div",null,[e[0]||(e[0]=i("h1",{id:"springboot",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#springboot"},[i("span",null,"SpringBoot")])],-1)),e[1]||(e[1]=i("p",null,"暂无",-1)),s(" more "),e[2]||(e[2]=n(`<h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><ul><li><code>@RequestParam</code>和<code>@RequestBody</code><br> 它允许你将请求体中的数据直接绑定到一个 Java 对象上，而不需要手动解析。可以减少处理 HTTP 请求数据的模板代码，使开发者可以更专注于业务逻辑。而<code>@RequestParam</code>主要处理简单类型的数据，而<code>@RequestBody</code>用于处理请求体中的数据,相比更复杂，如 JSON 或 XML 格式的数据。</li><li><code>@ResponBody</code><br><code>@RestController= @Controller + @ResponseBody</code>其中ResponBody作用在controller类或者方法中上，将方法返回值直接响应，如果返回值类型是实体对象/集合，则为JSON格式数据。</li></ul><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求"><span>请求</span></a></h2><ul><li>实体参数<br> 使用方法：通过创建实体类,传入参数<code>User user</code>，类中创建get，set方法以及tostring。</li><li>数组参数<br> 使用方法： <ul><li>传入参数<code>String[] name</code></li><li>传入参数<code>@RequestParam List&lt;String&gt; name</code></li></ul></li><li>日期参数<br> 使用方法： <code>@DateTimeFormat(patterm=yyyy-MM-dd HH:mm:ss)LocalDateTime updatetime</code></li><li>json参数<br> 使用方法：同实体参数不过加入注解,<code>@Requestbody User user</code></li><li>路径参数<br> 使用方法：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/path/{id}/{name}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathVariable</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathVariable</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>统一响应<br> 使用方法：通过构造实体类以包含各种类型的数据，Integer,String等，<code>Public &quot;自定义类&quot; name（类名）</code>,通过写入get，set方法进行包装。</li></ul>`,6))])}const h=t(r,[["render",l],["__file","SpringBoot.html.vue"]]),c=JSON.parse('{"path":"/java%E7%AC%94%E8%AE%B0/SpringBoot.html","title":"SpringBoot","lang":"zh-CN","frontmatter":{"tittle":"SpringBoot","icon":"pen-to-square","date":"2024-10-1","category":["Java"],"timeline":true,"tag":["Java"],"description":"暂无","head":[["meta",{"property":"og:url","content":"https://github.com/No-76/java%E7%AC%94%E8%AE%B0/SpringBoot.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"SpringBoot"}],["meta",{"property":"og:description","content":"暂无"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-02T17:02:10.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-02T17:02:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-02T17:02:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://github.com/No-76\\"}]}"]]},"headers":[{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":2,"title":"请求","slug":"请求","link":"#请求","children":[]}],"git":{"createdTime":1727886936000,"updatedTime":1727888530000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":2}]},"readingTime":{"minutes":1.14,"words":342},"filePathRelative":"java笔记/SpringBoot.md","localizedDate":"2024年10月1日","excerpt":"\\n<p>暂无</p>\\n","autoDesc":true}');export{h as comp,c as data};
