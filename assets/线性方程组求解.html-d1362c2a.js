const i=JSON.parse('{"key":"v-54d9f493","path":"/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E6%B1%82%E8%A7%A3.html","title":"LU分解","lang":"zh-CN","frontmatter":{"tittle":112,"icon":"pen-to-square","date":"2023-10-2","category":["课程学习"],"timeline":false,"tag":["LU","数值分析"],"description":"LU分解 LU分解相较于传统的高斯消元法，虽然具有相同的时间复杂度，但是面对不同的b值并不需要像高斯消元那样多次运行。下面的代码中用一个矩阵存储L和U矩阵。 def lu_decomposition(matrix): # 只能用于方阵 if len(matrix)!=len(matrix[0]): return False n=len(matrix) lu_matrix = np.zeros((n,n)) lu_matrix = lu_matrix.astype(float) for i in range(n): # 计算上三角矩阵U的元素 for j in range(i, n): sum = 0 for k in range(i): sum += (lu_matrix[i][k] * lu_matrix[k][j]) lu_matrix[i][j] = matrix[i][j] - sum # 计算下三角矩阵L的元素 for j in range(i + 1, n): sum = 0 for k in range(i): sum += (lu_matrix[j][k] * lu_matrix[k][i]) lu_matrix[j][i] = (matrix[j][i] - sum) / lu_matrix[i][i] return lu_matrix def lu_solve(lu_matrix, b): n = len(lu_matrix) # 解下三角矩阵方程 LY = B y = np.zeros(n) for i in range(n): y[i] = b[i] - np.dot(lu_matrix[i][:i], y[:i]) # 解上三角矩阵方程 UX = Y x = np.zeros(n) for i in range(n - 1, -1, -1): x[i] = (y[i] - np.dot(lu_matrix[i][i + 1:], x[i + 1:])) / lu_matrix[i][i] return x","head":[["meta",{"property":"og:url","content":"https://GSpotMan.github.io/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E6%B1%82%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Lzy"}],["meta",{"property":"og:title","content":"LU分解"}],["meta",{"property":"og:description","content":"LU分解 LU分解相较于传统的高斯消元法，虽然具有相同的时间复杂度，但是面对不同的b值并不需要像高斯消元那样多次运行。下面的代码中用一个矩阵存储L和U矩阵。 def lu_decomposition(matrix): # 只能用于方阵 if len(matrix)!=len(matrix[0]): return False n=len(matrix) lu_matrix = np.zeros((n,n)) lu_matrix = lu_matrix.astype(float) for i in range(n): # 计算上三角矩阵U的元素 for j in range(i, n): sum = 0 for k in range(i): sum += (lu_matrix[i][k] * lu_matrix[k][j]) lu_matrix[i][j] = matrix[i][j] - sum # 计算下三角矩阵L的元素 for j in range(i + 1, n): sum = 0 for k in range(i): sum += (lu_matrix[j][k] * lu_matrix[k][i]) lu_matrix[j][i] = (matrix[j][i] - sum) / lu_matrix[i][i] return lu_matrix def lu_solve(lu_matrix, b): n = len(lu_matrix) # 解下三角矩阵方程 LY = B y = np.zeros(n) for i in range(n): y[i] = b[i] - np.dot(lu_matrix[i][:i], y[:i]) # 解上三角矩阵方程 UX = Y x = np.zeros(n) for i in range(n - 1, -1, -1): x[i] = (y[i] - np.dot(lu_matrix[i][i + 1:], x[i + 1:])) / lu_matrix[i][i] return x"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-14T19:11:16.000Z"}],["meta",{"property":"article:author","content":"Lzy"}],["meta",{"property":"article:tag","content":"LU"}],["meta",{"property":"article:tag","content":"数值分析"}],["meta",{"property":"article:published_time","content":"2023-10-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-14T19:11:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LU分解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-14T19:11:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lzy\\",\\"url\\":\\"https://GSpotMan.com\\"}]}"]]},"headers":[{"level":2,"title":"值得注意的","slug":"值得注意的","link":"#值得注意的","children":[]},{"level":2,"title":"条件数","slug":"条件数","link":"#条件数","children":[]}],"git":{"createdTime":1696184253000,"updatedTime":1697310676000,"contributors":[{"name":"GSpotMan","email":"964600114@qq.com","commits":4}]},"readingTime":{"minutes":2.27,"words":680},"filePathRelative":"课程学习/数值分析/线性方程组求解.md","localizedDate":"2023年10月2日","excerpt":"<h1> LU分解</h1>\\n<p>LU分解相较于传统的高斯消元法，虽然具有相同的时间复杂度，但是面对不同的b值并不需要像高斯消元那样多次运行。下面的代码中用一个矩阵存储L和U矩阵。</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>def lu_decomposition(matrix):\\n    # 只能用于方阵\\n    if len(matrix)!=len(matrix[0]):\\n        return False\\n    n=len(matrix)\\n\\n    lu_matrix = np.zeros((n,n))\\n    lu_matrix = lu_matrix.astype(float)\\n\\n\\n    for i in range(n):\\n        # 计算上三角矩阵U的元素\\n        for j in range(i, n):\\n            sum = 0\\n            for k in range(i):\\n                sum += (lu_matrix[i][k] * lu_matrix[k][j])\\n            lu_matrix[i][j] = matrix[i][j] - sum\\n\\n        # 计算下三角矩阵L的元素\\n        for j in range(i + 1, n):\\n            sum = 0\\n            for k in range(i):\\n                sum += (lu_matrix[j][k] * lu_matrix[k][i])\\n            lu_matrix[j][i] = (matrix[j][i] - sum) / lu_matrix[i][i]\\n\\n    return lu_matrix\\n\\ndef lu_solve(lu_matrix, b):\\n    n = len(lu_matrix)\\n\\n    # 解下三角矩阵方程 LY = B\\n    y = np.zeros(n)\\n    for i in range(n):\\n        y[i] = b[i] - np.dot(lu_matrix[i][:i], y[:i])\\n\\n    # 解上三角矩阵方程 UX = Y\\n    x = np.zeros(n)\\n    for i in range(n - 1, -1, -1):\\n        x[i] = (y[i] - np.dot(lu_matrix[i][i + 1:], x[i + 1:])) / lu_matrix[i][i]\\n\\n    return x\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{i as data};
